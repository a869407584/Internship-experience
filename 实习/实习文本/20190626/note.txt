20190626主要讲解知识点：
	1）触控屏的使用。
	2）线程的创建与使用。
	3）账号登陆界面的设计。
	
一、触控屏的使用。
	1）检测触控屏是否可用？
	cat /dev/input/event0
	[root@GEC6818 ~/project]#cat /dev/input/event0 
	?A?AJ?A?¤T+?5?¤T{???¤T?è?¤T??J?¤T???¤T-#?¤T2#J?
	¤T5#?¤T-à??¤T2àP?¤T?àè?¤T1àJ?¤T?à?¤T???¤T
	
	若点击触控屏有乱码产生，则触控屏可用。
	结束检测：Ctrl + C
	
	2)获取触控屏的信息
	input.h
	/usr/include/linux/input.h
	
	/*
	 * The event structure itself
	 */
	struct input_event {
		struct timeval time;//获取触控屏的时间
		__u16 type;//事件的类型
		__u16 code;//事件类型的属性
		__s32 value;//事件类型属性的数据
	};	
	
	举例：
		获取触控屏的X轴坐标和Y轴坐标的信息。
	编程思路：
		1）打开触控屏。(/dev/input/event0)
		2）读取触控屏信息到struct input_event结构体中。（read）
			分析结构体中的信息，找到X轴坐标和Y轴坐标的数值。
		#include <linux/input.h>	
		struct input_event coordinate;

		while(1)
		{		
			read(fd_event0, &coordinate,sizeof(struct input_event));
			//ssize_t read(int fd, void *buf, size_t count);
			printf("type:%d; code:%d; value:%d\n", coordinate.type, coordinate.code, coordinate.value);		
			
		}
		
		3）关闭触控屏。
		
	练习7：
			根据思路打印触控屏的信息。
		
		type:3; code:0; value:550
		type:3; code:1; value:184
		type:3; code:24; value:200
		type:1; code:330; value:1
		type:0; code:0; value:0
		type:3; code:24; value:0
		type:1; code:330; value:0
		type:0; code:0; value:0	

		/*
		 * Event types
		 */
		#define EV_SYN			0x00//同步事件
		#define EV_KEY			0x01//按键事件
		#define EV_ABS			0x03//绝对坐标事件		
		
	
		type:3; code:0; value:550
		type:3; code:1; value:184
		type:3; code:24; value:200
		type:3; code:24; value:0
		
		/*
		 * Absolute axes
		 */
		#define ABS_X			0x00//X轴坐标的属性
		#define ABS_Y			0x01//Y轴坐标的属性
		#define ABS_PRESSURE		0x18//压力值属性（规定 按下时压力值的大小200； 松开0）
	
		type:1; code:330; value:1
		type:1; code:330; value:0
		
		#define BTN_TOUCH		0x14a//按下状态的属性（规定：按下1 ； 松开 0）；
	
	练习8：
		通过分析结构体信息，使用C语言中选择分支结构获取X轴坐标值和Y轴坐标值,并打印出来。
		if-else
		switch-case
		
二、线程的创建与使用。	
	线程：线程（英语：thread）是操作系统能够进行运算调度的最小单位。
	一个进程中可以并发多个线程，每条线程并行执行不同的任务。
	
	使用：
		pthread_create、pthread_join、pthread_exit
	pthread_create
	功能：创建一条新的线程。
	头文件：
		#include <pthread.h>
	函数原型：
		int pthread_create(pthread_t *thread, 
							const pthread_attr_t *attr,
							void *(*start_routine) (void *),
							void *arg);
	参数的含义：
		pthread_t *thread：线程的ID号。（一般定义一个pthread_t类型的变量）	
		const pthread_attr_t *attr：分离属性。（NULL，表示主线程和线程函数之间没有必然联系）
		void *(*start_routine) (void *)：线程函数。
		void *arg：线程函数的参数。（NULL，表示无参数传递）
			
	注意：Compile and link with -pthread.
	
	main.c
	arm-linux-gcc main.c -o armmain -pthread

	pthread_exit
	功能：终止正在运行的线程。
	#include <pthread.h>
	void pthread_exit(void *retval);
	void *retval：终止线程后，发送的数据。
	Compile and link with -pthread.
	
	pthread_join
	功能：等待线程的回收。
	int pthread_join(pthread_t thread, void **retval);
	pthread_t thread：线程的ID号。
	void **retval：pthread_exit函数的返回信息。
	
	举例：	
		在LCD屏幕中，同步运行两个任务：
		任务一：(主线程函数)
			在X:0~400;Y:0~480区域内，每隔1秒按照RGB顺序在指定的区域内填充颜色。
		任务一：（线程函数）
			在X:400~800;Y:0~480区域内，每隔1秒按照BRG顺序在指定的区域内填充颜色。			

	练习9：（usleep）
		在LCD屏幕中，同步运行四个任务：
		任务一：(线程函数)
			在X:0~400;Y:0~240区域内，每隔10*1000微秒按照RGB顺序在指定的区域内填充颜色。
		任务二：（线程函数）
			在X:400~800;Y:0~240区域内，每隔100*1000微秒按照RGB顺序在指定的区域内填充颜色。		
		任务三：(线程函数)
			在X:0~400;Y:240~480区域内，每隔1秒按照RGB顺序在指定的区域内填充颜色。
		任务四：（线程函数）
			在X:400~800;Y:240~480区域内，每隔2秒按照RGB顺序在指定的区域内填充颜色。
	
三、账号登陆界面的设计。
	1）密码账号的比较：	
	strncmp
	strcmp
	#include <string.h>
	int strcmp(const char *s1, const char *s2);
	int strncmp(const char *s1, const char *s2, size_t n);
	
	char login_account[7] ="123456";
	char login_password[7] ="123456";
	
	char input_account[7];
	char input_password[7];
	
	input_account[0] = '1';
		
	练习10：
		完成账号登陆界面的设计。（LCD屏幕+触控屏+C语言+Linux系统函数）
		